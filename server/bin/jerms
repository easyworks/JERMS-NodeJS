#!/usr/bin/env node

"use strict";

/**
 * Module dependencies.
 */
var debug = require( "debug" )( "jcms-node:server" );
var http  = require( "http" );

var app   = require( "../app" );
var config = require( "../config" );

//noinspection JSUnresolvedVariable
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort( process.env.PORT || config.server.port );
app.set( "port" , port );

//noinspection JSUnresolvedFunction
/**
 * Create HTTP server.
 */
var server = http.createServer( app );

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen( port , config.server.host );
server.on( "error" , onError );
server.on( "listening" , onListening );

/**
 * Normalize a port into a number, string, or false.
 *
 * @param val
 */
function normalizePort( val ) {

    var port = parseInt( val , 10 );

    if( isNaN( port ) ) {
        // named pipe
        return val;
    }

    if( port >= 0 ) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 *
 * @param error
 */
function onError( error ) {

    if( error.syscall !== "listen" ) {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe %s" : "Port %s";

    // handle specific listen errors with friendly messages
    switch( error.code ) {
        case "EACCES":
            console.error( bind + " requires elevated privileges" , port );
            process.exit( 1 );
            break;
        case "EADDRINUSE":
            console.error( bind + " is already in use" , port );
            process.exit( 1 );
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {

    var address = server.address();
    //noinspection JSUnusedLocalSymbols
    var bind = typeof address === "string"
        ? "pipe " + address
        : "port " + address.port
    ;

    debug( "Listening on " + bind );
}
